sequenceDiagram
    participant F as Frontend (HLS.js)
    participant B as Backend API
    participant S as Storage (MinIO/GCS)
    participant C as CDN (optional)

    Note over F,C: Secure HLS Streaming with Per-Request Authentication

    %% 1. Initial Authentication & Room Access
    F->>B: GET /api/v1/rooms/{roomId} (JWT/Guest Token)
    B-->>F: Room data with movie_id

    %% 2. Get Master Playlist Signed URL
    Note over F,B: Step 1: Get Master Playlist Access
    F->>B: GET /api/v1/videos/{movieId}/hls (JWT/Guest Token)
    Note right of B: Validate JWT or Guest Token, Check user/guest has access to movie, Generate signed URL for master.m3u8
    B->>S: Generate signed URL for hls/{movieId}/master.m3u8
    S-->>B: Signed URL (expires in 2 hours)
    B-->>F: {hls_url: "https://storage.com/hls/movieId/master.m3u8?signature=..."}

    %% 3. Fetch Master Playlist Content
    Note over F,S: Step 2: Fetch Master Playlist (Direct to Storage)
    F->>S: GET master.m3u8 (via signed URL)
    Note right of S: No auth needed - URL contains signature
    S-->>F: Master playlist content

    %% 4. Get Quality Playlist Signed URL
    Note over F,B: Step 3: Get Quality Playlist Access
    F->>B: POST /api/v1/videos/{movieId}/urls (JWT/Guest Token)
    Note right of F: Body: {files: ["1080p.m3u8"]}
    Note right of B: Validate JWT or Guest Token, Check user/guest has access to movie, Generate signed URL for quality playlist
    B->>S: Generate signed URL for hls/{movieId}/1080p.m3u8
    S-->>B: Signed URL (expires in 2 hours)
    B-->>F: {file_urls: {"1080p.m3u8": "https://storage.com/hls/movieId/1080p.m3u8?signature=..."}}

    %% 5. Fetch Quality Playlist Content
    Note over F,S: Step 4: Fetch Quality Playlist (Direct to Storage)
    F->>S: GET 1080p.m3u8 (via signed URL)
    S-->>F: Quality playlist content

    %% 6. Get Segment Signed URLs (Batch)
    Note over F,B: Step 5: Get Segment Access (Batch Request)
    F->>B: POST /api/v1/videos/{movieId}/urls (JWT/Guest Token)
    Note right of F: Body: {files: ["1080p/segment0.ts", "1080p/segment1.ts", "1080p/segment2.ts"]}
    Note right of B: Validate JWT or Guest Token, Check user/guest has access to movie, Generate signed URLs for segments
    loop For each segment
        B->>S: Generate signed URL for hls/{movieId}/1080p/segmentX.ts
        S-->>B: Signed URL (expires in 2 hours)
    end
    B-->>F: {file_urls: {"1080p/segment0.ts": "https://storage.com/...?signature=...", "1080p/segment1.ts": "https://storage.com/...?signature=...", "1080p/segment2.ts": "https://storage.com/...?signature=..."}}

    %% 7. Fetch Segments (Direct to Storage/CDN)
    Note over F,C: Step 6: Fetch Video Segments (Direct to Storage/CDN)
    loop For each segment needed
        alt CDN enabled (SaaS mode)
            F->>C: GET segment0.ts (via signed URL)
            Note right of C: CDN caches with signed URL - Subsequent requests served from CDN
            C->>S: GET segment0.ts (cache miss)
            S-->>C: Segment data
            C-->>F: Segment data
        else Self-hosted mode
            F->>S: GET segment0.ts (via signed URL)
            S-->>F: Segment data
        end
    end

    %% 8. Video Playback
    Note over F: HLS.js plays video seamlessly - Requests more segments as needed - Each segment request requires new signed URL

    %% Error Handling
    Note over F,B: Error Scenarios
    alt Token Expired/Invalid
        F->>B: Request with invalid/expired token
        B-->>F: 401 Unauthorized
        F->>F: Redirect to login or request new guest token
    else Movie Access Denied
        F->>B: Request for movie user can't access
        B-->>F: 403 Forbidden
        F->>F: Show "Access denied" error
    else Storage/CDN Error
        F->>S: Request with expired signed URL
        S-->>F: 403 Forbidden or 404 Not Found
        F->>B: Request new signed URL
    end
