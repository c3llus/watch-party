version: '3.8'

services:
  postgres:
    image: postgres:17-alpine
    container_name: watch-party-postgres
    networks:
      - watch_party_network
    environment:
      POSTGRES_DB: watch_party
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      TZ: UTC
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    container_name: watch-party-redis
    networks:
      - watch_party_network
    environment:
      TZ: UTC
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "6379:6379"

  minio:
    image: minio/minio:latest
    container_name: watch-party-minio
    networks:
      - watch_party_network
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      TZ: UTC
      MINIO_API_REQUESTS_MAX: "10000"
      MINIO_API_REQUESTS_DEADLINE: "10s"
      MINIO_LOG_LEVEL: "DEBUG"
      MINIO_HTTP_TRACE: "/dev/stdout"
    volumes:
      - minio_data:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    command: ["server", "/data", "--console-address", ":9001"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "9000:9000"
      - "9001:9001"

  minio-bucket-setup:
    image: minio/mc:latest
    container_name: watch-party-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - watch_party_network
    environment:
      MC_HOST_minio: http://minioadmin:minioadmin@minio:9000
      MINIO_HTTP_TRACE: output.log
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 minioadmin minioadmin &&
      mc mb minio/watch-party --ignore-existing &&
      exit 0
      "

  service-api:
    build:
      context: .
      dockerfile: ./service-api/Dockerfile
    container_name: watch-party-api
    env_file:
      - .env.container
    environment:
      PORT: "8080"
      TZ: UTC
    volumes:
      - video_processing:/tmp/watch-party-processing
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio-bucket-setup:
        condition: service_completed_successfully
    restart: unless-stopped
    networks:
      - watch_party_network
    ports:
      - "8080:8080"

  service-sync:
    build:
      context: .
      dockerfile: ./service-sync/Dockerfile
    container_name: watch-party-sync
    env_file:
      - .env.container
    environment:
      PORT: "8081"
      TZ: UTC
    volumes:
      - video_processing:/tmp/watch-party-processing
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio-bucket-setup:
        condition: service_completed_successfully
    restart: unless-stopped
    networks:
      - watch_party_network
    ports:
      - "8081:8081"

volumes:
  postgres_data:
  redis_data:
  minio_data:
  video_processing:

networks:
  watch_party_network:
    name: "watch_party_network"